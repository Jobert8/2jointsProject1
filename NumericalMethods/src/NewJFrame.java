
import bisectionmethod.SimpleCalculator;
import java.awt.Color;
import java.awt.Font;
import java.util.function.Function;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

    public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel5 = new javax.swing.JLabel();
        functionField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lowerBoundField = new javax.swing.JTextField();
        upperBoundField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        maxIterationsField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableModel = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setFont(new java.awt.Font("Impact", 0, 10)); // NOI18N
        setMinimumSize(new java.awt.Dimension(1000, 1000));

        jLabel5.setBackground(new java.awt.Color(255, 204, 204));
        jLabel5.setFont(new java.awt.Font("Impact", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(204, 153, 255));
        jLabel5.setText("BRACKETING METHOD CALCULATOR");

        functionField.setBackground(new java.awt.Color(255, 204, 255));
        functionField.setFont(new java.awt.Font("Impact", 0, 12)); // NOI18N
        functionField.setForeground(new java.awt.Color(204, 0, 204));
        functionField.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        functionField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                functionFieldActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Impact", 0, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 51, 255));
        jLabel2.setText("Enter the function in terms of x: ");

        jLabel3.setFont(new java.awt.Font("Impact", 0, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 102, 255));
        jLabel3.setText("Enter the initial guess for lower bound:");

        lowerBoundField.setBackground(new java.awt.Color(255, 204, 255));
        lowerBoundField.setFont(new java.awt.Font("Impact", 0, 12)); // NOI18N
        lowerBoundField.setForeground(new java.awt.Color(204, 0, 204));

        upperBoundField.setBackground(new java.awt.Color(255, 204, 255));
        upperBoundField.setFont(new java.awt.Font("Impact", 0, 12)); // NOI18N
        upperBoundField.setForeground(new java.awt.Color(204, 0, 204));

        jLabel1.setFont(new java.awt.Font("Impact", 0, 12)); // NOI18N
        jLabel1.setText("Enter the second guess for upper bound:");

        jLabel4.setFont(new java.awt.Font("Impact", 0, 12)); // NOI18N
        jLabel4.setText("Input the maximum iteration:");

        maxIterationsField.setBackground(new java.awt.Color(255, 204, 255));
        maxIterationsField.setFont(new java.awt.Font("Impact", 0, 12)); // NOI18N

        tableModel.setBackground(new java.awt.Color(255, 204, 255));
        tableModel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 0, 153), 3, true));
        tableModel.setFont(new java.awt.Font("Impact", 0, 12)); // NOI18N
        tableModel.setForeground(new java.awt.Color(153, 0, 153));
        tableModel.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Iteration", "Lower Bound", "Upper Bound", "Mid Point", "Lower Bound f(x)", "Upper Bound f(x)", "Function Value", "Percent Error"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tableModel.setColumnSelectionAllowed(true);
        tableModel.setGridColor(new java.awt.Color(51, 0, 153));
        tableModel.setName(""); // NOI18N
        tableModel.setOpaque(false);
        tableModel.setSelectionBackground(new java.awt.Color(153, 153, 255));
        tableModel.setSelectionForeground(new java.awt.Color(204, 204, 255));
        tableModel.setShowGrid(true);
        tableModel.setSurrendersFocusOnKeystroke(true);
        tableModel.getTableHeader().setResizingAllowed(false);
        tableModel.getTableHeader().setReorderingAllowed(false);
        tableModel.setUpdateSelectionOnSort(false);
        jScrollPane1.setViewportView(tableModel);

        jButton1.setBackground(new java.awt.Color(204, 204, 255));
        jButton1.setFont(new java.awt.Font("Impact", 0, 12)); // NOI18N
        jButton1.setForeground(new java.awt.Color(102, 102, 255));
        jButton1.setText("CALCULATE (BISECTION METHOD)");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(255, 0, 102));
        jButton2.setFont(new java.awt.Font("Impact", 0, 12)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 204, 204));
        jButton2.setText("CLEAR TABLE");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(204, 204, 255));
        jButton3.setFont(new java.awt.Font("Impact", 0, 12)); // NOI18N
        jButton3.setForeground(new java.awt.Color(102, 102, 255));
        jButton3.setText("CALCULATE (FALSE-POSITION METHOD)");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(760, 760, 760)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(646, 646, 646)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(164, 164, 164)
                        .addComponent(functionField, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(610, 610, 610)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(200, 200, 200)
                        .addComponent(lowerBoundField, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(600, 600, 600)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(upperBoundField, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(650, 650, 650)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(maxIterationsField, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(500, 500, 500)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(67, 67, 67)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(140, 140, 140)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1240, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(functionField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lowerBoundField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(upperBoundField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxIterationsField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(jButton3)
                    .addComponent(jButton2))
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 527, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

     private boolean validateInput() {
        String functionStr = functionField.getText().trim();
        String lowerBoundStr = lowerBoundField.getText().trim();
        String upperBoundStr = upperBoundField.getText().trim();
        String maxIterationsStr = maxIterationsField.getText().trim();

        return !functionStr.isEmpty() && !lowerBoundStr.isEmpty() && !upperBoundStr.isEmpty() && !maxIterationsStr.isEmpty();
    }
     
     
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (validateInput()) {
                    calculate();
                } else {
                    JOptionPane.showMessageDialog(NewJFrame.this,
                            "Please fill in all fields.", "Input Error", JOptionPane.ERROR_MESSAGE);
                }
            }
    
        private void calculate() {
        String functionStr = functionField.getText();
        double lowerBound = Double.parseDouble(lowerBoundField.getText());
        double upperBound = Double.parseDouble(upperBoundField.getText());
        int maxIterations = Integer.parseInt(maxIterationsField.getText());

        java.util.function.Function<Double, Double> function = x -> {
            String replaced = functionStr.replace("x", String.valueOf(x));
            return evaluate(replaced);
        };

        bisectionMethod(function, lowerBound, upperBound, maxIterations);
    }

    private void addToTable( int iteration, double lowerBound, double upperBound, double midPoint, Function<Double, Double> function, double functionValue, double percentError) {
        DefaultTableModel model = (DefaultTableModel)tableModel.getModel();
        double lowerBoundFunctionValue = function.apply(lowerBound);
        double upperBoundFunctionValue = function.apply(upperBound);
        model.addRow(new Object[]{ iteration, lowerBound, upperBound, midPoint, lowerBoundFunctionValue, upperBoundFunctionValue, functionValue, percentError});
        
    }

    private void bisectionMethod(Function<Double, Double> function, double lowerBound, double upperBound, int maxIterations) {
        double previousMidPoint = 0;

        for (int iterations = 1; iterations <= maxIterations; iterations++) {
            double midPoint = (lowerBound + upperBound) / 2;
            double functionValue = function.apply(midPoint);

            if (iterations > 1) {
                double percentError = Math.abs((midPoint - previousMidPoint) / midPoint) * 100;
                addToTable(iterations, lowerBound, upperBound, midPoint, function, functionValue, percentError);
            } else {
                addToTable(iterations, lowerBound, upperBound, midPoint, function, functionValue, 0);
            }

            if (functionValue > 0) {
                upperBound = midPoint;
            } else if (functionValue < 0) {
                lowerBound = midPoint;
            } else {
                break;
            }

            previousMidPoint = midPoint;
        }
    }

    private double evaluate(String expression) {
        return SimpleCalculator.evaluate(expression);
    
    }
    
     private void clearTable() {
        DefaultTableModel model = (DefaultTableModel) tableModel.getModel();
        model.setRowCount(0); // Remove all rows from the table   

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        clearTable();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void functionFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_functionFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_functionFieldActionPerformed

    private void calculateFalsePosition() {
        String functionStr = functionField.getText();
        double lowerBound = Double.parseDouble(lowerBoundField.getText());
        double upperBound = Double.parseDouble(upperBoundField.getText());
        int maxIterations = Integer.parseInt(maxIterationsField.getText());

        Function<Double, Double> function = x -> {
            String replaced = functionStr.replace("x", String.valueOf(x));
            return evaluate(replaced);
        };

        falsePositionMethod(function, lowerBound, upperBound, maxIterations);
    }
    
    
    
    private void falsePositionMethod(Function<Double, Double> function, double lowerBound, double upperBound, int maxIterations) {
        double previousMidPoint = 0;

        for (int iterations = 1; iterations <= maxIterations; iterations++) {
            double functionAtLowerBound = function.apply(lowerBound);
            double functionAtUpperBound = function.apply(upperBound);

            double midPoint = lowerBound - (functionAtLowerBound * (upperBound - lowerBound)) / (functionAtUpperBound - functionAtLowerBound);
            double functionValue = function.apply(midPoint);

            if (iterations > 1) {
                double percentError = Math.abs((midPoint - previousMidPoint) / midPoint) * 100;
                addToTable( iterations, lowerBound, upperBound, midPoint, function, functionValue, percentError);
            } else {
                addToTable( iterations, lowerBound, upperBound, midPoint, function, functionValue, 0);
            }

            if (functionValue > 0) {
                upperBound = midPoint;
            } else if (functionValue < 0) {
                lowerBound = midPoint;
            } else {
                break;
            }

            previousMidPoint = midPoint;
        }
    }
    
    
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if (validateInput()) {
                    calculateFalsePosition();
                } else {
                    JOptionPane.showMessageDialog(NewJFrame.this,
                            "Please fill in all fields.", "Input Error", JOptionPane.ERROR_MESSAGE);
                }
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField functionField;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField lowerBoundField;
    private javax.swing.JTextField maxIterationsField;
    private static javax.swing.JTable tableModel;
    private javax.swing.JTextField upperBoundField;
    // End of variables declaration//GEN-END:variables

    }